{"version":3,"file":"sampleData-F7JomEeO.js","sources":["../../node_modules/date-fns/addDays.mjs","../../src/data/sampleData.ts"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","\nimport { LeaveDate, Member } from '../utils/dateUtils';\nimport { addDays, format } from 'date-fns';\n\n// Generate sample leave dates for the next 30 days\nexport const generateSampleLeaveDates = (): LeaveDate[] => {\n  const today = new Date();\n  const leaveDates: LeaveDate[] = [];\n  \n  for (let i = 1; i <= 60; i++) {\n    const date = addDays(today, i);\n    const dateStr = format(date, 'yyyy-MM-dd');\n    \n    // Random max slots between 2-4\n    const maxSlots = Math.floor(Math.random() * 2) + 2;\n    \n    leaveDates.push({\n      date: dateStr,\n      maxSlots: maxSlots,\n      bookedSlots: 0,\n      bookedBy: []\n    });\n  }\n  \n  return leaveDates;\n};\n\n// Sample team members\nexport const sampleMembers: Member[] = [\n  { id: 'user1', name: 'John Smith', bookedDates: [] },\n  { id: 'user2', name: 'Jane Doe', bookedDates: [] },\n  { id: 'user3', name: 'Michael Johnson', bookedDates: [] },\n  { id: 'user4', name: 'Emily Williams', bookedDates: [] },\n  { id: 'user5', name: 'David Brown', bookedDates: [] },\n];\n\n// In a real app, you'd fetch the current user from auth\nexport const currentUser: Member = sampleMembers[0];\n"],"names":["addDays","date","amount","_date","toDate","isNaN","constructFrom","NaN","setDate","getDate","generateSampleLeaveDates","today","Date","leaveDates","i","dateStr","format","maxSlots","Math","floor","random","push","bookedSlots","bookedBy"],"mappings":"gDAuBO,SAASA,EAAQC,EAAMC,GACtB,MAAAC,EAAQC,EAAOH,GACrB,OAAII,MAAMH,GAAgBI,EAAcL,EAAMM,KACzCL,GAILC,EAAMK,QAAQL,EAAMM,UAAYP,GACzBC,GAHEA,CAIX,CC3BO,MAAMO,EAA2B,KAChC,MAAAC,MAAYC,KACZC,EAA0B,GAEhC,IAAA,IAASC,EAAI,EAAGA,GAAK,GAAIA,IAAK,CACtB,MAAAb,EAAOD,EAAQW,EAAOG,GACtBC,EAAUC,EAAOf,EAAM,cAGvBgB,EAAWC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAEjDP,EAAWQ,KAAK,CACdpB,KAAMc,EACNE,WACAK,YAAa,EACbC,SAAU,IAEd,CAEO,OAAAV,CAAA","x_google_ignoreList":[0]}